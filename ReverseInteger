Given a 32-bit signed integer, reverse digits of an integer.

Example 1:

Input: 123
Output: 321
Example 2:

Input: -123
Output: -321
Example 3:

Input: 120
Output: 21
Note:
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: 
[−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.

----------------------------------------------------------------------------------------------------------------------------

Pseudocode : 

1] Input an integer 
2] Check whether the no falls in negative no or positive no.
3] Do it in a while loop, untill there is no reaminder of the no. 
4] Separate the last digit of the integer no, using modulo, store the no in cur_digit
5] Multiply the remainder no with 10 and add the incoming remainder no, inorder to reverse
6] Check whether the rev - cur_digit != prev
7] Store the quotient of the integer no, using the mathematical division 
8] Output the reversed integer no.


Solution : (Java)

class Solution {
    public int reverse(int x) {
        boolean negativeFlag = false;
        if (x < 0) {
            negativeFlag = true;
            x = -x;
        }
        int rev = 0;
        int prev_rev = 0;
        while(x != 0){
            int cur_digit = (x % 10);
            rev = rev * 10 + cur_digit;
            if ((rev - cur_digit)/10 != prev_rev) {
                return 0;
            }
            prev_rev = rev;
            x = x / 10;
        }
        return (negativeFlag == true) ? -rev : rev;
    }
}


Solution : (Python)

class Solution:
    def reverse(self, x):
        """
        :type x: int
        :rtype: int
        """
        max_32 = 2147483647
        min_32 = -2147483648
        if((x > max_32) or (x < min_32)):
            return 0
        else:
            rev = 0
            sign = (x > 0) - (x < 0)
            x = abs(x)
            while (x != 0):
                cur = x % 10
                x = x // 10
                rev = rev * 10 + cur
            if((rev > max_32) or (rev < min_32)):
                return 0
           
            return rev * sign




